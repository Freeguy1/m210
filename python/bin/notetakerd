#!/usr/bin/python
# -*- coding: utf-8 -*-

# Standard modules.
import optparse
import os.path
import sys

# Third-party modules.
import dbus
import dbus.service
import dbus.mainloop.glib

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

import PyQt4.QtCore

# Project-specific modules.
import linux
import linux.input
import notetaker.pegatech

SERVICE_NAME = 'org.codegrove.notetaker'
DAEMON_INTERFACE_NAME = 'org.codegrove.notetaker.daemon'

class M210Connection(object):

    def __init__(self, hidraw0_path, hidraw1_path, event_path):
        self._event_fd = None
        self._event_fd = os.open(event_path, os.O_RDWR)
        linux.input.grab_event_device(self._event_fd)
        self.m210 = notetaker.pegatech.M210((hidraw0_path, hidraw1_path))

    def __del__(self):
        if self._event_fd is not None:
            # self._event_fd might be None if self.__init__ fails for
            # some reason.
            linux.input.release_event_device(self._event_fd)

class Daemon(dbus.service.Object):

    OBJECT_PATH = '/org/codegrove/notetaker/daemon'

    def __init__(self, bus):
        dbus.service.Object.__init__(self, bus, Daemon.OBJECT_PATH)
        self._connections = {}

    @dbus.service.method(DAEMON_INTERFACE_NAME, in_signature='ssss',
                         out_signature='')
    def connect(self, syspath, hidraw0_path, hidraw1_path, event_path):
        if syspath in self._connections:
            raise ValueError("%s is already connected" % syspath)
        self._connections[syspath] = M210Connection(hidraw0_path, hidraw1_path,
                                                    event_path)

    @dbus.service.method(DAEMON_INTERFACE_NAME, in_signature='s',
                         out_signature='')
    def disconnect(self, syspath):
        self._connections.pop(syspath)

    @dbus.service.method(DAEMON_INTERFACE_NAME, in_signature='',
                         out_signature='as')
    def connections(self):
        return list(self._connections.keys())

def attach_to_dbus():
    global _name
    global _dbus_objects

    # Integrate to glib-mainloop. For some reason, DBusQtMainLoop does not work.
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    # Open a bus.
    bus = dbus.SystemBus()

    # Register a well-known name for the service.
    _name = dbus.service.BusName(SERVICE_NAME, bus)

    # Export objects through the bus.
    _dbus_objects = []
    _dbus_objects.append(Daemon(bus))

def parse_args():
    parser = optparse.OptionParser(version='''%s 0.1
Copyright (C) 2010 Tuomas (tuos) R채s채nen <tuos@codegrove.org>
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Tuomas R채s채nen.''' % (linux.PROGRAM_INVOCATION_SHORT_NAME))
    parser.add_option('', '--no-daemon', action='store_false',
                      default=True, dest='daemon',
                      help='do not run %s as a daemon'
                      % linux.PROGRAM_INVOCATION_SHORT_NAME)
    return parser.parse_args(sys.argv)

def main():
    options, args = parse_args()

    if options.daemon:
        linux.daemonize()

    attach_to_dbus()

    app = PyQt4.QtCore.QCoreApplication([])
    app.exec_()

if __name__ == '__main__':
    main()
